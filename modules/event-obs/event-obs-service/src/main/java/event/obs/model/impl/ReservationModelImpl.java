/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package event.obs.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import event.obs.model.Reservation;
import event.obs.model.ReservationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Reservation service. Represents a row in the &quot;OBS_Reservation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ReservationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReservationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReservationImpl
 * @generated
 */
@JSON(strict = true)
public class ReservationModelImpl
	extends BaseModelImpl<Reservation> implements ReservationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a reservation model instance should use the <code>Reservation</code> interface instead.
	 */
	public static final String TABLE_NAME = "OBS_Reservation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"idReservation", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"idUser", Types.BIGINT}, {"idEvent", Types.BIGINT},
		{"nom", Types.VARCHAR}, {"prenom", Types.VARCHAR},
		{"entite", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idReservation", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("idUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idEvent", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prenom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entite", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OBS_Reservation (uuid_ VARCHAR(75) null,idReservation LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,idUser LONG,idEvent LONG,nom VARCHAR(75) null,prenom VARCHAR(75) null,entite VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OBS_Reservation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY reservation.idReservation ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OBS_Reservation.idReservation ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDRESERVATION_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ReservationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idReservation;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdReservation(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idReservation;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Reservation.class;
	}

	@Override
	public String getModelClassName() {
		return Reservation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Reservation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Reservation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reservation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Reservation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Reservation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Reservation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Reservation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Reservation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Reservation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Reservation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Reservation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Reservation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Reservation, Object>>();
		Map<String, BiConsumer<Reservation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Reservation, ?>>();

		attributeGetterFunctions.put("uuid", Reservation::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Reservation, String>)Reservation::setUuid);
		attributeGetterFunctions.put(
			"idReservation", Reservation::getIdReservation);
		attributeSetterBiConsumers.put(
			"idReservation",
			(BiConsumer<Reservation, Long>)Reservation::setIdReservation);
		attributeGetterFunctions.put("groupId", Reservation::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Reservation, Long>)Reservation::setGroupId);
		attributeGetterFunctions.put("companyId", Reservation::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Reservation, Long>)Reservation::setCompanyId);
		attributeGetterFunctions.put("createDate", Reservation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Reservation, Date>)Reservation::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Reservation::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Reservation, Date>)Reservation::setModifiedDate);
		attributeGetterFunctions.put("idUser", Reservation::getIdUser);
		attributeSetterBiConsumers.put(
			"idUser", (BiConsumer<Reservation, Long>)Reservation::setIdUser);
		attributeGetterFunctions.put("idEvent", Reservation::getIdEvent);
		attributeSetterBiConsumers.put(
			"idEvent", (BiConsumer<Reservation, Long>)Reservation::setIdEvent);
		attributeGetterFunctions.put("nom", Reservation::getNom);
		attributeSetterBiConsumers.put(
			"nom", (BiConsumer<Reservation, String>)Reservation::setNom);
		attributeGetterFunctions.put("prenom", Reservation::getPrenom);
		attributeSetterBiConsumers.put(
			"prenom", (BiConsumer<Reservation, String>)Reservation::setPrenom);
		attributeGetterFunctions.put("entite", Reservation::getEntite);
		attributeSetterBiConsumers.put(
			"entite", (BiConsumer<Reservation, String>)Reservation::setEntite);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getIdReservation() {
		return _idReservation;
	}

	@Override
	public void setIdReservation(long idReservation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idReservation = idReservation;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getIdUser() {
		return _idUser;
	}

	@Override
	public void setIdUser(long idUser) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idUser = idUser;
	}

	@JSON
	@Override
	public long getIdEvent() {
		return _idEvent;
	}

	@Override
	public void setIdEvent(long idEvent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idEvent = idEvent;
	}

	@JSON
	@Override
	public String getNom() {
		if (_nom == null) {
			return "";
		}
		else {
			return _nom;
		}
	}

	@Override
	public void setNom(String nom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nom = nom;
	}

	@JSON
	@Override
	public String getPrenom() {
		if (_prenom == null) {
			return "";
		}
		else {
			return _prenom;
		}
	}

	@Override
	public void setPrenom(String prenom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prenom = prenom;
	}

	@JSON
	@Override
	public String getEntite() {
		if (_entite == null) {
			return "";
		}
		else {
			return _entite;
		}
	}

	@Override
	public void setEntite(String entite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entite = entite;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Reservation.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Reservation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Reservation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Reservation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReservationImpl reservationImpl = new ReservationImpl();

		reservationImpl.setUuid(getUuid());
		reservationImpl.setIdReservation(getIdReservation());
		reservationImpl.setGroupId(getGroupId());
		reservationImpl.setCompanyId(getCompanyId());
		reservationImpl.setCreateDate(getCreateDate());
		reservationImpl.setModifiedDate(getModifiedDate());
		reservationImpl.setIdUser(getIdUser());
		reservationImpl.setIdEvent(getIdEvent());
		reservationImpl.setNom(getNom());
		reservationImpl.setPrenom(getPrenom());
		reservationImpl.setEntite(getEntite());

		reservationImpl.resetOriginalValues();

		return reservationImpl;
	}

	@Override
	public Reservation cloneWithOriginalValues() {
		ReservationImpl reservationImpl = new ReservationImpl();

		reservationImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		reservationImpl.setIdReservation(
			this.<Long>getColumnOriginalValue("idReservation"));
		reservationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		reservationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		reservationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		reservationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		reservationImpl.setIdUser(this.<Long>getColumnOriginalValue("idUser"));
		reservationImpl.setIdEvent(
			this.<Long>getColumnOriginalValue("idEvent"));
		reservationImpl.setNom(this.<String>getColumnOriginalValue("nom"));
		reservationImpl.setPrenom(
			this.<String>getColumnOriginalValue("prenom"));
		reservationImpl.setEntite(
			this.<String>getColumnOriginalValue("entite"));

		return reservationImpl;
	}

	@Override
	public int compareTo(Reservation reservation) {
		long primaryKey = reservation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Reservation)) {
			return false;
		}

		Reservation reservation = (Reservation)object;

		long primaryKey = reservation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Reservation> toCacheModel() {
		ReservationCacheModel reservationCacheModel =
			new ReservationCacheModel();

		reservationCacheModel.uuid = getUuid();

		String uuid = reservationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			reservationCacheModel.uuid = null;
		}

		reservationCacheModel.idReservation = getIdReservation();

		reservationCacheModel.groupId = getGroupId();

		reservationCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			reservationCacheModel.createDate = createDate.getTime();
		}
		else {
			reservationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			reservationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			reservationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		reservationCacheModel.idUser = getIdUser();

		reservationCacheModel.idEvent = getIdEvent();

		reservationCacheModel.nom = getNom();

		String nom = reservationCacheModel.nom;

		if ((nom != null) && (nom.length() == 0)) {
			reservationCacheModel.nom = null;
		}

		reservationCacheModel.prenom = getPrenom();

		String prenom = reservationCacheModel.prenom;

		if ((prenom != null) && (prenom.length() == 0)) {
			reservationCacheModel.prenom = null;
		}

		reservationCacheModel.entite = getEntite();

		String entite = reservationCacheModel.entite;

		if ((entite != null) && (entite.length() == 0)) {
			reservationCacheModel.entite = null;
		}

		return reservationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Reservation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Reservation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reservation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Reservation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Reservation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Reservation.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _idReservation;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _idUser;
	private long _idEvent;
	private String _nom;
	private String _prenom;
	private String _entite;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Reservation, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Reservation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("idReservation", _idReservation);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("idUser", _idUser);
		_columnOriginalValues.put("idEvent", _idEvent);
		_columnOriginalValues.put("nom", _nom);
		_columnOriginalValues.put("prenom", _prenom);
		_columnOriginalValues.put("entite", _entite);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("idReservation", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("idUser", 64L);

		columnBitmasks.put("idEvent", 128L);

		columnBitmasks.put("nom", 256L);

		columnBitmasks.put("prenom", 512L);

		columnBitmasks.put("entite", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Reservation _escapedModel;

}